#!/bin/bash

ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Check /scripts/config/remote-config for script configuration
source /workspaces/edna2023/scripts/config/remote-config-orin

deploy-rsync() {
    echo "Deploying to $USERNAME@$IP_ADDRESS:$REMOTE_PATH (port $PORT) via rsync..."

    echo "Generating rsync metadata..."
    rsync -azPin -e "ssh -p $PORT" \
        --exclude .git/ \
        --exclude .vscode/ \
        --exclude .devcontainer/ \
        --exclude build/ \
        --exclude install/ \
        --exclude log/ \
        --exclude rio/ \
        --exclude isaac/ \
        --exclude *.rviz \
        --exclude __pycache__ \
        --exclude joy \
        --exclude edna_debugger \
        --exclude edna_tests \
        --exclude .rsyncmetadata \
    /workspaces/edna2023/ $USERNAME@$IP_ADDRESS:$REMOTE_PATH \
        | egrep -v "sending incremental file list" | egrep -v "^\." | awk '{print $2}' | tr ' ' '\n' >> /workspaces/edna2023/.rsyncmetadata

    echo "Syncing files..."
    rsync -azP -e "ssh -p $PORT" \
        --exclude .git/ \
        --exclude .vscode/ \
        --exclude .devcontainer/ \
        --exclude build/ \
        --exclude install/ \
        --exclude log/ \
        --exclude rio/ \
        --exclude isaac/ \
        --exclude *.rviz \
        --exclude __pycache__ \
        --exclude joy \
        --exclude edna_debugger \
        --exclude edna_tests \
    /workspaces/edna2023/ $USERNAME@$IP_ADDRESS:$REMOTE_PATH
    echo -e "${GREEN}Done deploying files to remote${NC}"
}

sshCommand() {
    ssh -t $USERNAME@$IP_ADDRESS -p $PORT "$@"
}

edna-stop() {
    sshCommand "cd $REMOTE_PATH && docker compose stop"
}

edna-restart() {
    sshCommand "cd $REMOTE_PATH && docker compose restart"
}

edna-log() {
    sshCommand "cd $REMOTE_PATH && docker compose logs -f"
}

edna-setup() {
    if [ ! -f ~/.ssh/robot_deploy ]; then
        ssh-keygen -b 2048 -t rsa -f ~/.ssh/robot_deploy -q -N ""
        echo -e "${GREEN}robot_deploy key created${NC}"
    fi
    echo -e "${ORANGE}Copying robot_deploy public key to $USERNAME@$IP_ADDRESS:$PORT...${NC}"
    ssh-copy-id -p $PORT -i ~/.ssh/robot_deploy.pub $USERNAME@$IP_ADDRESS 
}

smart-build() {
    echo -e "${PURPLE}Generating a plan for a smart build${NC}"
    smartPlan=`sshCommand "cd $REMOTE_PATH && ./scripts/remote-rebuild plan"`
    if [ -z "$smartPlan" ]; then
        echo -e "${GREEN}No packages to rebuild${NC}"
    else
        # Show the Plan
        echo -e "${ORANGE}$(echo $smartPlan | wc -w) Packages to rebuild:${NC}"
        printf '%s\n' $smartPlan

        # Ask if the user wants to apply the plan
        read -p "Would you like to apply this plan? (y/n) " response
        if [ "$response" == "y" ]; then
            sshCommand "cd $REMOTE_PATH && ./scripts/remote-rebuild apply $smartPlan"
        fi
    fi
}

complete-build() {
    ehco -e "${ORANGE}WARNING: DOING COMPLETE REBUILD, THIS WILL TAKE A WHILE${NC}"
    echo "Stopping containers to save resources during rebuild..."
    edna-stop
    echo "Removing old build files..."
    sshCommand "cd $REMOTE_PATH && sudo rm -rf build/ install/ log/"
    echo "Starting rebuild container..."
    # if [ -z "$2" ]; then
    #     ssh $USERNAME@$IP_ADDRESS -p $PORT "cd $REMOTE_PATH && source /opt/ros/humble/setup.bash && colcon build --symlink-install --paths src/*";
    # else
    #     ssh $USERNAME@$IP_ADDRESS -p $PORT "cd $REMOTE_PATH && source /opt/ros/humble/setup.bash && colcon build --symlink-install --paths src/* --packages-select ${@:2}";
    # fi
    # edna-restart
}

help() {
    echo "Usage:"
    echo "  config  -- Opens the config file in nano"
    echo "  setup   -- Copies your ssh-key to the remote device"
    echo "  ssh     -- Connects to the robot via ssh"
    echo "  service"
    echo "      log     -- Outputs the systemctl log for edna.service"
    echo "      restart -- Restarts the systemctl edna.service"
    echo "  deploy"
    echo "      rsync   -- Deploys to the remote device using rsync (default)"
    echo "      git     -- Deploys to the remote device using Git"
    echo "  rebuild [packages] -- Rebuilds packages with colcon (all packages if not specified)"
    echo "  run  [command]  -- Runs an arbitrary command on the remote device "
    echo ""
    echo "Aliases:"
    echo "  connect -- alias for \"remote ssh\""
    echo "  log     -- alias for \"remote service log\""
    echo "  restart -- alias for \"remote service restart\""
    echo "Usage: remote (config | setup | ssh | service | deploy | rebuild | run)"
}

case $1 in 
    "config")
        nano /workspaces/edna2023/scripts/config/remote-config
    ;;

    "setup")
        edna-setup
    ;;
        
    "connect") ;&
    "ssh")
        echo "Connecting to $USERNAME@$IP_ADDRESS:$PORT"
        ssh $USERNAME@$IP_ADDRESS -p $PORT
    ;;

    "deploy")
        case $2 in
            "") ;&
            "rsync")
                deploy-rsync
            ;;

            *)
                echo "Unknown option: $2"
                help
            ;;
        esac
        ;;

    "service")
        case $2 in
            "log")
                edna-log
                ;;
            
            "restart")
                edna-restart
                ;;
        esac
        ;;

    "exec")
        sshCommand "${@:2}";
        ;;
    
    "log")
        edna-log
        ;;
        
    "restart")
        edna-restart
        ;;
    
    "stop")
        edna-stop
        ;;

    "build")
        smart-build $@
        ;;
    
    
    *)
        echo "Unknown option: $1"
        help
        ;;
esac